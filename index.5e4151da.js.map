{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction makeNumber(str) {\n    return Number(str.replace(/[$,]/g, \"\"));\n}\nfunction detectDataType(value) {\n    if (!isNaN(value) || !isNaN(makeNumber(value))) return \"number\";\n    else return \"string\";\n}\nvar body = document.querySelector(\"body\");\nvar table = document.querySelector(\"table\");\nvar headers = document.querySelectorAll(\"th\");\nvar firstRow = table.querySelector(\"tbody tr\");\nvar tableBody = table.querySelector(\"tbody\");\nvar tableRows = Array.from(tableBody.rows);\nif (firstRow) headers.forEach(function(header, index) {\n    var firstCell = firstRow.cells[index];\n    if (firstCell) {\n        var firstCellValue = firstCell.textContent.trim();\n        header.dataset.type = detectDataType(firstCellValue);\n        header.dataset.sortASC = \"true\";\n        header.addEventListener(\"click\", function() {\n            var isAscending = header.dataset.sortASC === \"true\";\n            header.dataset.sortASC = isAscending ? \"false\" : \"true\";\n            var sortedRows = tableRows.sort(function(a, b) {\n                var aContent = a.cells[index].textContent.trim();\n                var bContent = b.cells[index].textContent.trim();\n                var comparison = 0;\n                if (header.dataset.type === \"number\") comparison = makeNumber(aContent) - makeNumber(bContent);\n                else comparison = aContent.localeCompare(bContent);\n                return isAscending ? comparison : -comparison;\n            });\n            tableBody.innerHTML = \"\";\n            sortedRows.forEach(function(row) {\n                tableBody.appendChild(row);\n            });\n        });\n    }\n});\nvar selectedRow = null;\ntableRows.forEach(function(row) {\n    row.addEventListener(\"click\", function(e) {\n        if (selectedRow) selectedRow.classList.remove(\"active\");\n        var currentRow = e.currentTarget;\n        currentRow.classList.add(\"active\");\n        selectedRow = currentRow;\n    });\n});\nvar form = document.createElement(\"form\");\nform.className = \"new-employee-form\";\nform.action = \"#\";\nform.method = \"POST\";\nform.setAttribute(\"novalidate\", true);\nform.innerHTML = '\\n  <label>\\n    Name:\\n    <input\\n      data-qa=\"name\"\\n      type=\"text\"\\n      name=\"name\"\\n      required\\n    />\\n  </label>\\n\\n  <label>\\n    Position:\\n    <input\\n      data-qa=\"position\"\\n      type=\"text\"\\n      name=\"position\"\\n      required\\n    />\\n  </label>\\n\\n  <label>\\n    Office:\\n    <select\\n      data-qa=\"office\"\\n      name=\"office\"\\n      required\\n    >\\n      <option value=\"empty\">Select office</option>\\n      <option value=\"Tokyo\">Tokyo</option>\\n      <option value=\"Singapore\">Singapore</option>\\n      <option value=\"London\">London</option>\\n      <option value=\"New York\">New York</option>\\n      <option value=\"Edinburgh\">Edinburgh</option>\\n      <option value=\"San Francisco\">San Francisco</option>\\n    </select>\\n  </label>\\n\\n  <label>\\n    Age:\\n    <input\\n      data-qa=\"age\"\\n      type=\"number\"\\n      name=\"age\"\\n      required\\n    />\\n  </label>\\n\\n  <label>\\n    Salary:\\n    <input\\n      data-qa=\"salary\"\\n      type=\"number\"\\n      name=\"salary\"\\n      required\\n    />\\n  </label>\\n  <button type=\"submit\">Save to table</button>\\n';\nbody.append(form);\nvar pushNotification = function(posTop, posRight, title, description) {\n    var type = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : \"\";\n    var message = document.createElement(\"div\");\n    message.className = \"notification\";\n    message.dataset.qa = \"notification\";\n    message.classList.add(type);\n    message.style.top = \"\".concat(posTop, \"px\");\n    message.style.right = \"\".concat(posRight, \"px\");\n    message.innerHTML = \"\\n    <h2 class='title'>\\n      \".concat(title, \"\\n    </h2>\\n    <p>\\n      \").concat(description, \"\\n    </p>\\n  \");\n    body.append(message);\n    setTimeout(function() {\n        message.remove();\n    }, 5000);\n};\nvar checkData = function(data) {\n    var employeeName = data.name, position = data.position, office = data.office, age = data.age, salary = data.salary;\n    if (!employeeName || employeeName.trim().length < 4) {\n        pushNotification(10, 10, \"Error!\", \"Name must be at least 4 characters long\", \"error\");\n        return false;\n    }\n    if (!position.trim()) {\n        pushNotification(10, 10, \"Error!\", \"Position field cannot be empty!\", \"error\");\n        return false;\n    }\n    if (!office || office === \"empty\") {\n        pushNotification(10, 10, \"Error!\", \"Office field cannot be empty!\", \"error\");\n        return false;\n    }\n    if (!age || age < 18 || age > 90) {\n        pushNotification(10, 10, \"Error!\", \"Age must be between 18 and 90\", \"error\");\n        return false;\n    }\n    if (!salary || isNaN(salary)) {\n        pushNotification(500, 10, \"Error!\", \"Salary must be a number\", \"error\");\n        return false;\n    }\n    return true;\n};\nform.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    var formData = new FormData(e.target);\n    var formObj = Object.fromEntries(formData.entries());\n    if (!checkData(formObj)) return;\n    var newRow = document.createElement(\"tr\");\n    var formattedSalary = Number(formObj.salary).toLocaleString(\"en-US\");\n    newRow.innerHTML = \"\\n    <td>\".concat(formObj.name, \"</td>\\n    <td>\").concat(formObj.position, \"</td>\\n    <td>\").concat(formObj.office, \"</td>\\n    <td>\").concat(formObj.age, \"</td>\\n    <td>$\").concat(formattedSalary, \"</td>\\n    \");\n    tableBody.append(newRow);\n    pushNotification(10, 10, \"Success!\", \"New employee added to the table\", \"success\");\n    form.reset();\n});\n\n//# sourceMappingURL=index.5e4151da.js.map\n","'use strict';\n\nfunction makeNumber(str) {\n  return Number(str.replace(/[$,]/g, ''));\n}\n\nfunction detectDataType(value) {\n  if (!isNaN(value) || !isNaN(makeNumber(value))) {\n    return 'number';\n  } else {\n    return 'string';\n  }\n}\n\nconst body = document.querySelector('body');\nconst table = document.querySelector('table');\nconst headers = document.querySelectorAll('th');\nconst firstRow = table.querySelector('tbody tr');\nconst tableBody = table.querySelector('tbody');\nconst tableRows = Array.from(tableBody.rows);\n\nif (firstRow) {\n  headers.forEach((header, index) => {\n    const firstCell = firstRow.cells[index];\n\n    if (firstCell) {\n      const firstCellValue = firstCell.textContent.trim();\n\n      header.dataset.type = detectDataType(firstCellValue);\n      header.dataset.sortASC = 'true';\n\n      header.addEventListener('click', () => {\n        const isAscending = header.dataset.sortASC === 'true';\n\n        header.dataset.sortASC = isAscending ? 'false' : 'true';\n\n        const sortedRows = tableRows.sort((a, b) => {\n          const aContent = a.cells[index].textContent.trim();\n          const bContent = b.cells[index].textContent.trim();\n\n          let comparison = 0;\n\n          if (header.dataset.type === 'number') {\n            comparison = makeNumber(aContent) - makeNumber(bContent);\n          } else {\n            comparison = aContent.localeCompare(bContent);\n          }\n\n          return isAscending ? comparison : -comparison;\n        });\n\n        tableBody.innerHTML = '';\n\n        sortedRows.forEach((row) => {\n          tableBody.appendChild(row);\n        });\n      });\n    }\n  });\n}\n\nlet selectedRow = null;\n\ntableRows.forEach((row) => {\n  row.addEventListener('click', (e) => {\n    if (selectedRow) {\n      selectedRow.classList.remove('active');\n    }\n\n    const currentRow = e.currentTarget;\n\n    currentRow.classList.add('active');\n\n    selectedRow = currentRow;\n  });\n});\n\nconst form = document.createElement('form');\n\nform.className = 'new-employee-form';\nform.action = '#';\nform.method = 'POST';\nform.setAttribute('novalidate', true);\n\nform.innerHTML = `\n  <label>\n    Name:\n    <input\n      data-qa=\"name\"\n      type=\"text\"\n      name=\"name\"\n      required\n    />\n  </label>\n\n  <label>\n    Position:\n    <input\n      data-qa=\"position\"\n      type=\"text\"\n      name=\"position\"\n      required\n    />\n  </label>\n\n  <label>\n    Office:\n    <select\n      data-qa=\"office\"\n      name=\"office\"\n      required\n    >\n      <option value=\"empty\">Select office</option>\n      <option value=\"Tokyo\">Tokyo</option>\n      <option value=\"Singapore\">Singapore</option>\n      <option value=\"London\">London</option>\n      <option value=\"New York\">New York</option>\n      <option value=\"Edinburgh\">Edinburgh</option>\n      <option value=\"San Francisco\">San Francisco</option>\n    </select>\n  </label>\n\n  <label>\n    Age:\n    <input\n      data-qa=\"age\"\n      type=\"number\"\n      name=\"age\"\n      required\n    />\n  </label>\n\n  <label>\n    Salary:\n    <input\n      data-qa=\"salary\"\n      type=\"number\"\n      name=\"salary\"\n      required\n    />\n  </label>\n  <button type=\"submit\">Save to table</button>\n`;\n\nbody.append(form);\n\nconst pushNotification = (posTop, posRight, title, description, type = '') => {\n  const message = document.createElement('div');\n\n  message.className = 'notification';\n  message.dataset.qa = 'notification';\n  message.classList.add(type);\n  message.style.top = `${posTop}px`;\n  message.style.right = `${posRight}px`;\n\n  message.innerHTML = `\n    <h2 class='title'>\n      ${title}\n    </h2>\n    <p>\n      ${description}\n    </p>\n  `;\n\n  body.append(message);\n\n  setTimeout(() => {\n    message.remove();\n  }, 5000);\n};\n\nconst checkData = (data) => {\n  const { name: employeeName, position, office, age, salary } = data;\n\n  if (!employeeName || employeeName.trim().length < 4) {\n    pushNotification(\n      10,\n      10,\n      'Error!',\n      'Name must be at least 4 characters long',\n      'error',\n    );\n\n    return false;\n  }\n\n  if (!position.trim()) {\n    pushNotification(\n      10,\n      10,\n      'Error!',\n      'Position field cannot be empty!',\n      'error',\n    );\n\n    return false;\n  }\n\n  if (!office || office === 'empty') {\n    pushNotification(\n      10,\n      10,\n      'Error!',\n      'Office field cannot be empty!',\n      'error',\n    );\n\n    return false;\n  }\n\n  if (!age || age < 18 || age > 90) {\n    pushNotification(\n      10,\n      10,\n      'Error!',\n      'Age must be between 18 and 90',\n      'error',\n    );\n\n    return false;\n  }\n\n  if (!salary || isNaN(salary)) {\n    pushNotification(500, 10, 'Error!', 'Salary must be a number', 'error');\n\n    return false;\n  }\n\n  return true;\n};\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const formData = new FormData(e.target);\n  const formObj = Object.fromEntries(formData.entries());\n\n  if (!checkData(formObj)) {\n    return;\n  }\n\n  const newRow = document.createElement('tr');\n\n  const formattedSalary = Number(formObj.salary).toLocaleString('en-US');\n\n  newRow.innerHTML = `\n    <td>${formObj.name}</td>\n    <td>${formObj.position}</td>\n    <td>${formObj.office}</td>\n    <td>${formObj.age}</td>\n    <td>$${formattedSalary}</td>\n    `;\n\n  tableBody.append(newRow);\n\n  pushNotification(\n    10,\n    10,\n    'Success!',\n    'New employee added to the table',\n    'success',\n  );\n\n  form.reset();\n});\n"],"names":["makeNumber","str","Number","replace","body","document","querySelector","table","headers","querySelectorAll","firstRow","tableBody","tableRows","Array","from","rows","forEach","header","index","firstCell","cells","firstCellValue","textContent","trim","dataset","type","isNaN","sortASC","addEventListener","isAscending","sortedRows","sort","a","b","aContent","bContent","comparison","localeCompare","innerHTML","row","appendChild","selectedRow","e","classList","remove","currentRow","currentTarget","add","form","createElement","className","action","method","setAttribute","append","pushNotification","posTop","posRight","title","description","arguments","length","message","qa","style","top","concat","right","setTimeout","checkData","data","employeeName","name","position","office","age","salary","preventDefault","formObj","Object","fromEntries","formData","FormData","target","entries","newRow","formattedSalary","toLocaleString","reset"],"version":3,"file":"index.5e4151da.js.map"}